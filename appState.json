{
  "EDITOR_STATE": {
    "allProjectFiles": {
      "fa54cc39-b36b-4a0e-a7ed-6dc250ddf816": {
        "id": "fa54cc39-b36b-4a0e-a7ed-6dc250ddf816",
        "parent": null,
        "name": "Alexa_AWS_SDK_Test",
        "type": "DIRECTORY",
        "isDirectory": true,
        "children": [
          "9c1ee3bc-b1e1-4ec7-96d9-17d623ebc333"
        ],
        "isRemovable": false,
        "filePath": "Alexa_AWS_SDK_Test"
      },
      "9c1ee3bc-b1e1-4ec7-96d9-17d623ebc333": {
        "id": "9c1ee3bc-b1e1-4ec7-96d9-17d623ebc333",
        "parent": "fa54cc39-b36b-4a0e-a7ed-6dc250ddf816",
        "name": "lambda.js",
        "type": "LAMBDA_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "Alexa_AWS_SDK_Test/lambda.js",
        "code": "// AWS_SDK 2.398.0\nvar AWS = require('aws-sdk');\nvar deviceName = \"SmartHomePi\";   //thing name from AWS IoT\nvar host = \"ahmugwdjfy1w4-ats.iot.eu-west-1.amazonaws.com\"; //host address\n//var app_id = \"amzn1.ask.skill.2b38790d-905a-4005-ad73-908f63e1622f\" //app id from Alexa skill\n\nvar iotdata = new AWS.IotData({endpoint: host});\n\nvar ctx = null;\n\nfunction testPublish()\n{\n\tvar params = {\n\t    topic: 'smartHomeTest',\n    \tpayload: 'provaprova',\n    \tqos: 0\n\t};\n\t\n\tiotdata.publish(params, function(err, data) {\n\t\tif(err){\n\t\t\tconsole.log(err);\n\t\t}\n\t\telse{\n\t\t\tconsole.log(\"Success, I guess.\");\n\t\t\tvar cardTitle = \"TEST IOT DATA\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"The test publish was successful\";\n\t\t\tvar repromptText = \"The test publish was successful\";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t}\n\t});\n\n\treturn true;\n\n}\nfunction handleCustomIntents(intentName)\n{\n\t// Dispatch to your skill's intent handlers\n    var retValue = false;\n\t\n\tretValue = testPublish();\n\n\tif (\"BedroomLightOn\" === intentName) {\n\t\t/*thingShadows.publish('taifur/test/pi/voice', 'Bedlighton', function(){\n\t\t\tvar cardTitle = \"Bedroom Lamp on\";\n\t\t\tvar repromptText = \"\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"Your bedroom light is on. \";\n\t\t\trepromptText = \"Your bedroom light is on. \";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t});*/\n\t\tretValue = true;\n\t\n    }else if (\"BedroomLightOff\" === intentName) {\n\t\t/*thingShadows.publish('taifur/test/pi/voice', 'Bedlightoff', function(){\n\t\t\tvar cardTitle = \"Lamp on\";\n\t\t\tvar repromptText = \"\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"Your bedroom light is off. \";\n\t\t\trepromptText = \"Your bedroom light is off. \";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t});*/\n\t\tretValue = true;\n\t\n    }else if (\"KitchenLightOn\" === intentName) {\n\t\t/*thingShadows.publish('taifur/test/pi/voice', 'Kitchenlighton', function(){\n\t\t\tvar cardTitle = \"Lamp on\";\n\t\t\tvar repromptText = \"\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"Your kitchen light is on. \";\n\t\t\trepromptText = \"Your kitchen light is on. \";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t});*/\n\t\tretValue = true;\n\t\n    }else if (\"KitchenLightOff\" === intentName) {\n\t\t/*thingShadows.publish('taifur/test/pi/voice', 'Kitchenlightoff', function(){\n\t\t\tvar cardTitle = \"Lamp on\";\n\t\t\tvar repromptText = \"\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"Your kitchen light is off. \";\n\t\t\trepromptText = \"Your kitchen light is off. \";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t});*/\n\t\tretValue = true;\n\t\n    }else if (\"BathroomLightOn\" === intentName) {\n\t\t/*thingShadows.publish('taifur/test/pi/voice', 'Bathroomlighton', function(){\n\t\t\tvar cardTitle = \"Lamp on\";\n\t\t\tvar repromptText = \"\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"Your bathroom light is on. \";\n\t\t\trepromptText = \"Your bathroom light is on. \";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t});*/\n\t\tretValue = true;\n\t\n    }else if (\"BathroomLightOff\" === intentName) {\n        /*thingShadows.publish('taifur/test/pi/voice', 'Bathroomlightoff', function(){\n\t\t\tvar cardTitle = \"Lamp off\";\n\t\t\tvar repromptText = \"\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"Your bathroom light is off. \";\n\t\t\trepromptText = \"Your bathroom light is off. \";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t});*/\n\t\tretValue = true;\n\t\t\n    }else if (\"BedroomFanOn\" === intentName) {\n\t\t/*thingShadows.publish('taifur/test/pi/voice', 'Bedroomfanon', function(){\n\t\t\tvar cardTitle = \"Lamp on\";\n\t\t\tvar repromptText = \"\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"Your bedroom fan is on. \";\n\t\t\trepromptText = \"Your bedroom fan is on. \";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t});*/\n\t\tretValue = true;\n\t\n    }else if (\"BedroomFanOff\" === intentName) {\n        /*thingShadows.publish('taifur/test/pi/voice', 'Bedroomfanoff', function(){\n\t\t\tvar cardTitle = \"Lamp off\";\n\t\t\tvar repromptText = \"\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"Your bedroom fan is off. \";\n\t\t\trepromptText = \"Your bedroom fan is off. \";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t});*/\n\t\tretValue = true;\n\t\t\n    }else if (\"IncreaseSpeed\" === intentName) {\n\t\t  /*var speedLevelSlotInc = intent.slots.Speed;\n\t\t  var speedLevelInc = speedLevelSlotInc.value;\n\t      thingShadows.publish('taifur/test/pi/voice', 'Inc' +speedLevelInc, function(){\n\t\t    var cardTitle = \"Fan Speed\";\n\t\t    var repromptText = \"\";\n\t\t    var speechOutput = \"Fan speed is adjusted to \" + speedLevelInc + \" percent. \";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\t\t\t\n\t    });*/\n\t\tretValue = true;\n\t\n\t}else if (\"DecreaseSpeed\" === intentName) {\n          /*var speedLevelSlot = intent.slots.Speed;\n\t\t  var speedLevel = speedLevelSlot.value;\n\t      thingShadows.publish('taifur/test/pi/voice', 'Dec' +speedLevel, function(){\n\t\t    var cardTitle = \"Fan Speed\";\n\t\t    var repromptText = \"\";\n\t\t    var speechOutput = \"Fan speed is adjusted to \" + speedLevel + \" percent. \";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\t\t\t\n\t    });*/\n\t\tretValue = true;\n\t}\n\n\treturn retValue;\n}\n\n\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@ ALEXA STANDARD HANDLING @@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n// Route the incoming request based on type (LaunchRequest, IntentRequest, etc.) The JSON body of the request is provided in the event parameter.\nexports.handler = function (event, context, callback) {\n    try {\n        console.log(\"event.session.application.applicationId=\" + event.session.application.applicationId);\n        ctx = context;\n\n        // if (event.session.application.applicationId !== app_id) {\n        //      ctx.fail(\"Invalid Application ID\");\n        //  }\n \n        if (event.session.new) {\n            onSessionStarted({requestId: event.request.requestId}, event.session);\n        }\n        if (event.request.type === \"LaunchRequest\") {\n            onLaunch(event.request, event.session);\n        }  else if (event.request.type === \"IntentRequest\") {\n            onIntent(event.request, event.session);\n        } else if (event.request.type === \"SessionEndedRequest\") {\n            onSessionEnded(event.request, event.session);\n            ctx.succeed();\n        }\n    } catch (e) {\n        console.log(\"EXCEPTION in handler:  \" + e);\n        ctx.fail(\"Exception: \" + e);\n    }\n};\n\n/**\n * Called when the session starts.\n */\nfunction onSessionStarted(sessionStartedRequest, session) {\n    console.log(\"onSessionStarted requestId=\" + sessionStartedRequest.requestId + \", sessionId=\" + session.sessionId);\n}\n\n/**\n * Called when the user launches the skill without specifying what they want.\n */\nfunction onLaunch(launchRequest, session, callback) {\n    console.log(\"onLaunch requestId=\" + launchRequest.requestId + \", sessionId=\" + session.sessionId);\n\n    // Dispatch to your skill's launch.\n    getWelcomeResponse(callback);\n}\n\n/**\n * Called when the user specifies an intent for this skill.\n */\nfunction onIntent(intentRequest, session ) {                  //, callback) {\n    console.log(\"onIntent requestId=\" + intentRequest.requestId + \", sessionId=\" + session.sessionId);\n\n    var intent = intentRequest.intent,\n    intentName = intentRequest.intent.name;\n\n    console.log(\"REQUEST to string =\" + JSON.stringify(intentRequest));\n\n    var callback = null;\n\n\tif (handleCustomIntents(intentName))\n\t{\n\n\t}else if (\"AMAZON.HelpIntent\" === intentName) {\n        getHelp(callback);\n    }else if (\"AMAZON.StopIntent\" === intentName || \"AMAZON.CancelIntent\" === intentName) {\n        handleSessionEndRequest(callback);\n    }else {\n        throw \"Invalid intent\";\n    }\n\n}\n\n/**\n * Called when the user ends the session.\n * Is not called when the skill returns shouldEndSession=true.\n */\nfunction onSessionEnded(sessionEndedRequest, session) {\n    console.log(\"onSessionEnded requestId=\" + sessionEndedRequest.requestId + \", sessionId=\" + session.sessionId);\n    // Add cleanup logic here\n}\n\n// --------------- Functions that control the skill's behavior -----------------------\n\nfunction getWelcomeResponse() {\n    // If we wanted to initialize the session to have some attributes we could add those here.\n    var sessionAttributes = {};\n    var cardTitle = \"Welcome\";\n    var speechOutput = \"Welcome to Pi Home Master . I can control your electrical appliances. Tell me what can I do for you. \";\n\n    var repromptText = \"I am ready for command.\";\n    var shouldEndSession = false;\n\n    ctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\n}\n\nfunction getHelp() {\n\tvar sessionAttributes = {};\n    var cardTitle = \"Help\";\n    var speechOutput = \"Welcome to pi home master, I can control your light and fan. \" + \n    \"You can ask me by saying, turn on my bedroom light or turn off my bedroom fan.\";\n    var repromptText = \"Would you like to control your light or fan?\";\n    var shouldEndSession = false;\n\n    ctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n}\n\nfunction handleSessionEndRequest() {\n\tvar sessionAttributes = {};\n    var cardTitle = \"Session Ended\";\n    var speechOutput = \"Thank you for using pi home master, Have a nice day!\";\n    var shouldEndSession = true;\n\tvar repromptText = \"\";\n    ctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n}\n\n\n// --------------- Helpers that build all of the responses -----------------------\n\nfunction buildSpeechletResponse(title, output, repromptText, shouldEndSession) {\n    return {\n        outputSpeech: {\n            type: \"PlainText\",\n            text: output\n        },\n        card: {\n            type: \"Simple\",\n            title: title,\n            content: output\n        },\n        reprompt: {\n            outputSpeech: {\n                type: \"PlainText\",\n                text: repromptText\n            }\n        },\n        shouldEndSession: shouldEndSession\n    }\n}\n\nfunction buildResponse(sessionAttributes, speechletResponse) {\n    return {\n        version: \"1.0\",\n        sessionAttributes: sessionAttributes,\n        response: speechletResponse\n    }\n}\n",
        "triggers": [],
        "config": {
          "runtime": "nodejs8.10",
          "timeout": 60,
          "memory": 128
        }
      }
    },
    "deletedFiles": [],
    "rootNode": "fa54cc39-b36b-4a0e-a7ed-6dc250ddf816",
    "openFiles": [
      "9c1ee3bc-b1e1-4ec7-96d9-17d623ebc333"
    ],
    "currentFileId": "9c1ee3bc-b1e1-4ec7-96d9-17d623ebc333",
    "resources": {},
    "envVariables": [
      {
        "lambdaId": "all",
        "varKey": "SIGMA_AWS_ACC_ID",
        "varValue": null,
        "shouldPersist": false,
        "displayOnly": false,
        "editable": false
      }
    ],
    "packageJSON": {
      "dependencies": {
        "aws-sdk": {
          "name": "aws-sdk",
          "version": "2.398.0"
        }
      }
    },
    "lambdaId": "9c1ee3bc-b1e1-4ec7-96d9-17d623ebc333"
  },
  "PROJECT_META": {
    "projectName": "Alexa_AWS_SDK_Test",
    "projectDescription": "",
    "projectVersion": "1.0.0",
    "projectRegion": "eu-west-1",
    "platform": "AWS",
    "platformRegions": {},
    "lastSave": 1549530463352
  },
  "VCS_STATE": {
    "provider": "GitHub",
    "repo": {
      "name": "Alexa_AWS_SDK_Test",
      "url": "https://github.com/stefanomoccia/Alexa_AWS_SDK_Test"
    }
  }
}