{
  "EDITOR_STATE": {
    "allProjectFiles": {
      "fa54cc39-b36b-4a0e-a7ed-6dc250ddf816": {
        "id": "fa54cc39-b36b-4a0e-a7ed-6dc250ddf816",
        "parent": null,
        "name": "Alexa_AWS_SDK_Test",
        "type": "DIRECTORY",
        "isDirectory": true,
        "children": [
          "9c1ee3bc-b1e1-4ec7-96d9-17d623ebc333"
        ],
        "isRemovable": false,
        "filePath": "Alexa_AWS_SDK_Test"
      },
      "9c1ee3bc-b1e1-4ec7-96d9-17d623ebc333": {
        "id": "9c1ee3bc-b1e1-4ec7-96d9-17d623ebc333",
        "parent": "fa54cc39-b36b-4a0e-a7ed-6dc250ddf816",
        "name": "lambda.js",
        "type": "LAMBDA_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "Alexa_AWS_SDK_Test/lambda.js",
        "code": "// AWS_SDK 2.398.0\nvar AWS = require('aws-sdk');\nvar deviceName = \"SmartHomePi\";   //thing name from AWS IoT\nvar host = \"ahmugwdjfy1w4-ats.iot.eu-west-1.amazonaws.com\"; //host address\n//var app_id = \"amzn1.ask.skill.2b38790d-905a-4005-ad73-908f63e1622f\" //app id from Alexa skill\n\nvar iotdata = new AWS.IotData({endpoint: host});\n\nvar ctx = null;\n\nfunction testPublish()\n{\n\tvar params = {\n\t    topic: 'smartHomeTest',\n    \tpayload: 'provaprova',\n    \tqos: 0\n\t};\n\t\n\tiotdata.publish(params, function(err, data) {\n\t\tif(err){\n\t\t\tconsole.log(err);\n\t\t}\n\t\telse{\n\t\t\tconsole.log(\"Success, I guess.\");\n\t\t\tvar cardTitle = \"TEST IOT DATA\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"The test publish was successful\";\n\t\t\tvar repromptText = \"The test publish was successful\";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t}\n\t});\n}\nfunction handleCustomIntents(intentName)\n{\n\t// Dispatch to your skill's intent handlers\n    var retValue = false;\n\t// ############################ TESTING ################################\n\tretValue = testPublish();\n\tupdateReportedTestValuesToShadow();\n\tupdateDesiredTestValuesToShadow();\n\tretValue = true;\n\t// ############################ END TESTING ################################\n\n\tif (\"GetTemperature\" === intentName) {\n\t\tgetValuesFromShadow('temp');\n\t\t/*thingShadows.publish('taifur/test/pi/voice', 'Bedlighton', function(){\n\t\t\tvar cardTitle = \"Bedroom Lamp on\";\n\t\t\tvar repromptText = \"\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"Your bedroom light is on. \";\n\t\t\trepromptText = \"Your bedroom light is on. \";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t});*/\n\t\tretValue = true;\n\t\n    }else if (\"GetLights\" === intentName) {\n\t\tgetValuesFromShadow('humd');\n\t\t/*thingShadows.publish('taifur/test/pi/voice', 'Bedlightoff', function(){\n\t\t\tvar cardTitle = \"Lamp on\";\n\t\t\tvar repromptText = \"\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"Your bedroom light is off. \";\n\t\t\trepromptText = \"Your bedroom light is off. \";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t});*/\n\t\tretValue = true;\n\t\n    }else if (\"KitchenLightOn\" === intentName) {\n\t\t/*thingShadows.publish('taifur/test/pi/voice', 'Kitchenlighton', function(){\n\t\t\tvar cardTitle = \"Lamp on\";\n\t\t\tvar repromptText = \"\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"Your kitchen light is on. \";\n\t\t\trepromptText = \"Your kitchen light is on. \";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t});*/\n\t\tretValue = true;\n\t\n    }else if (\"KitchenLightOff\" === intentName) {\n\t\t/*thingShadows.publish('taifur/test/pi/voice', 'Kitchenlightoff', function(){\n\t\t\tvar cardTitle = \"Lamp on\";\n\t\t\tvar repromptText = \"\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"Your kitchen light is off. \";\n\t\t\trepromptText = \"Your kitchen light is off. \";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t});*/\n\t\tretValue = true;\n\t\n    }else if (\"BathroomLightOn\" === intentName) {\n\t\t/*thingShadows.publish('taifur/test/pi/voice', 'Bathroomlighton', function(){\n\t\t\tvar cardTitle = \"Lamp on\";\n\t\t\tvar repromptText = \"\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"Your bathroom light is on. \";\n\t\t\trepromptText = \"Your bathroom light is on. \";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t});*/\n\t\tretValue = true;\n\t\n    }else if (\"BathroomLightOff\" === intentName) {\n        /*thingShadows.publish('taifur/test/pi/voice', 'Bathroomlightoff', function(){\n\t\t\tvar cardTitle = \"Lamp off\";\n\t\t\tvar repromptText = \"\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"Your bathroom light is off. \";\n\t\t\trepromptText = \"Your bathroom light is off. \";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t});*/\n\t\tretValue = true;\n\t\t\n    }else if (\"BedroomFanOn\" === intentName) {\n\t\t/*thingShadows.publish('taifur/test/pi/voice', 'Bedroomfanon', function(){\n\t\t\tvar cardTitle = \"Lamp on\";\n\t\t\tvar repromptText = \"\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"Your bedroom fan is on. \";\n\t\t\trepromptText = \"Your bedroom fan is on. \";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t});*/\n\t\tretValue = true;\n\t\n    }else if (\"BedroomFanOff\" === intentName) {\n        /*thingShadows.publish('taifur/test/pi/voice', 'Bedroomfanoff', function(){\n\t\t\tvar cardTitle = \"Lamp off\";\n\t\t\tvar repromptText = \"\";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tvar speechOutput = \"Your bedroom fan is off. \";\n\t\t\trepromptText = \"Your bedroom fan is off. \";\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\t\t});*/\n\t\tretValue = true;\n\t\t\n    }else if (\"IncreaseSpeed\" === intentName) {\n\t\t  /*var speedLevelSlotInc = intent.slots.Speed;\n\t\t  var speedLevelInc = speedLevelSlotInc.value;\n\t      thingShadows.publish('taifur/test/pi/voice', 'Inc' +speedLevelInc, function(){\n\t\t    var cardTitle = \"Fan Speed\";\n\t\t    var repromptText = \"\";\n\t\t    var speechOutput = \"Fan speed is adjusted to \" + speedLevelInc + \" percent. \";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\t\t\t\n\t    });*/\n\t\tretValue = true;\n\t\n\t}else if (\"DecreaseSpeed\" === intentName) {\n          /*var speedLevelSlot = intent.slots.Speed;\n\t\t  var speedLevel = speedLevelSlot.value;\n\t      thingShadows.publish('taifur/test/pi/voice', 'Dec' +speedLevel, function(){\n\t\t    var cardTitle = \"Fan Speed\";\n\t\t    var repromptText = \"\";\n\t\t    var speechOutput = \"Fan speed is adjusted to \" + speedLevel + \" percent. \";\n\t\t\tvar sessionAttributes = {};\n\t\t\tvar shouldEndSession = false;\n\t\t\tctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\t\t\t\n\t    });*/\n\t\tretValue = true;\n\t}\n\n\treturn retValue;\n}\n\n\nfunction updateDesiredTestValuesToShadow()\n{\n\tvar newStatus = 'ON';\n\tvar update = {\n                \"state\": {\n                   \"desired\" : {\n                        \"status\" : newStatus\n                    }\n                }\n            };\n\tiotdata.updateThingShadow({\n    \t\tpayload: JSON.stringify(update),\n        \tthingName: deviceName\n        }, function(err, data) {\n\t\t\tif (err) {\n\t\t\t\tctx.fail(err);\n\t\t\t} else {\n\t\t\t\tconsole.log(data);\n\t\t\t\tctx.succeed('newStatus: ' + newStatus);\n\t\t\t}\n\n\t\t}\n\t);\n\t\n\t\n}\n\nfunction updateReportedTestValuesToShadow()\n{\n\tvar newStatus = 'ON';\n\tvar update = {\n                \"state\": {\n                   \"reported\" : {\n                        \"status\" : newStatus\n                    }\n                }\n            };\n\tiotdata.updateThingShadow({\n    \t\tpayload: JSON.stringify(update),\n        \tthingName: deviceName\n        }, function(err, data) {\n\t\t\tif (err) {\n\t\t\t\tctx.fail(err);\n\t\t\t} else {\n\t\t\t\tconsole.log(data);\n\t\t\t\tctx.succeed('newStatus: ' + newStatus);\n\t\t\t}\n\n\t\t}\n\t);\n\t\n\t\n}\n\nfunction getValuesFromShadow(req)\n{\n\tvar request = req\n\tiotdata.getThingShadow({\n        thingName: deviceName\n    }, function(err, data) {\n        if (err) {\n            ctx.fail(err);\n        } else {\n            console.log(data);\n            var jsonPayload = JSON.parse(data.payload);\n            if(request === 'temp')\n\t\t\t{\n\t\t\t\tvar value = jsonPayload.state.reported.temp;\n\t            console.log('temp: ' + value);\n\t\t\t\tctx.succeed('temperature: ' + value);\n            }\n\t\t\telse if (request === 'humd')\n\t\t\t{\n\t\t\t\tvar value = jsonPayload.state.reported.humd;\n\t            console.log('humidity: ' + value);\n\t\t\t\tctx.succeed('humidity: ' + value);\n            }\n        }\n    });\n}\n\n\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@ ALEXA STANDARD HANDLING @@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n// Route the incoming request based on type (LaunchRequest, IntentRequest, etc.) The JSON body of the request is provided in the event parameter.\nexports.handler = function (event, context, callback) {\n    try {\n        console.log(\"event.session.application.applicationId=\" + event.session.application.applicationId);\n        ctx = context;\n\n        // if (event.session.application.applicationId !== app_id) {\n        //      ctx.fail(\"Invalid Application ID\");\n        //  }\n \n        if (event.session.new) {\n            onSessionStarted({requestId: event.request.requestId}, event.session);\n        }\n        if (event.request.type === \"LaunchRequest\") {\n            onLaunch(event.request, event.session);\n        }  else if (event.request.type === \"IntentRequest\") {\n            onIntent(event.request, event.session);\n        } else if (event.request.type === \"SessionEndedRequest\") {\n            onSessionEnded(event.request, event.session);\n            ctx.succeed();\n        }\n    } catch (e) {\n        console.log(\"EXCEPTION in handler:  \" + e);\n        ctx.fail(\"Exception: \" + e);\n    }\n};\n\n/**\n * Called when the session starts.\n */\nfunction onSessionStarted(sessionStartedRequest, session) {\n    console.log(\"onSessionStarted requestId=\" + sessionStartedRequest.requestId + \", sessionId=\" + session.sessionId);\n}\n\n/**\n * Called when the user launches the skill without specifying what they want.\n */\nfunction onLaunch(launchRequest, session, callback) {\n    console.log(\"onLaunch requestId=\" + launchRequest.requestId + \", sessionId=\" + session.sessionId);\n\n    // Dispatch to your skill's launch.\n    getWelcomeResponse(callback);\n}\n\n/**\n * Called when the user specifies an intent for this skill.\n */\nfunction onIntent(intentRequest, session ) {                  //, callback) {\n    console.log(\"onIntent requestId=\" + intentRequest.requestId + \", sessionId=\" + session.sessionId);\n\n    var intent = intentRequest.intent,\n    intentName = intentRequest.intent.name;\n\n    console.log(\"REQUEST to string =\" + JSON.stringify(intentRequest));\n\n    var callback = null;\n\n\tif (handleCustomIntents(intentName))\n\t{\n\n\t}else if (\"AMAZON.HelpIntent\" === intentName) {\n        getHelp(callback);\n    }else if (\"AMAZON.StopIntent\" === intentName || \"AMAZON.CancelIntent\" === intentName) {\n        handleSessionEndRequest(callback);\n    }else {\n        throw \"Invalid intent\";\n    }\n\n}\n\n/**\n * Called when the user ends the session.\n * Is not called when the skill returns shouldEndSession=true.\n */\nfunction onSessionEnded(sessionEndedRequest, session) {\n    console.log(\"onSessionEnded requestId=\" + sessionEndedRequest.requestId + \", sessionId=\" + session.sessionId);\n    // Add cleanup logic here\n}\n\n// --------------- Functions that control the skill's behavior -----------------------\n\nfunction getWelcomeResponse() {\n    // If we wanted to initialize the session to have some attributes we could add those here.\n    var sessionAttributes = {};\n    var cardTitle = \"Benenuto\";\n    var speechOutput = \"Benvenuto a casa Moccia. Io posso controllare le luci e la temperatura di casa. Dimmi cosa vuoi che io faccia.\";\n\n    var repromptText = \"Sono pronta a ricevere i comandi.\";\n    var shouldEndSession = false;\n\n    ctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n\n}\n\nfunction getHelp() {\n\tvar sessionAttributes = {};\n    var cardTitle = \"Aiuto\";\n    var speechOutput = \"Benvenuto a casa Moccia. Io posso controllare le luci e la temperatura di casa. Dimmi cosa vuoi che io faccia.\" + \n    \"Mi puoi chiedere che temperatura c'è ora in casa o di accendere o spegnere il riscaldamento o ancora di accendere e spegnere le luci.\";\n    var repromptText = \"Vuoi sapere la temperatura?\";\n    var shouldEndSession = false;\n\n    ctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n}\n\nfunction handleSessionEndRequest() {\n\tvar sessionAttributes = {};\n    var cardTitle = \"Fine\";\n    var speechOutput = \"Grazie per aver deciso di usare Alexa per la tua casa. Buona giornata!\";\n    var shouldEndSession = true;\n\tvar repromptText = \"\";\n    ctx.succeed(buildResponse(sessionAttributes, buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession)));\n}\n\n\n// --------------- Helpers that build all of the responses -----------------------\n\nfunction buildSpeechletResponse(title, output, repromptText, shouldEndSession) {\n    return {\n        outputSpeech: {\n            type: \"PlainText\",\n            text: output\n        },\n        card: {\n            type: \"Simple\",\n            title: title,\n            content: output\n        },\n        reprompt: {\n            outputSpeech: {\n                type: \"PlainText\",\n                text: repromptText\n            }\n        },\n        shouldEndSession: shouldEndSession\n    }\n}\n\nfunction buildResponse(sessionAttributes, speechletResponse) {\n    return {\n        version: \"1.0\",\n        sessionAttributes: sessionAttributes,\n        response: speechletResponse\n    }\n}\n",
        "triggers": [],
        "config": {
          "runtime": "nodejs8.10",
          "timeout": 60,
          "memory": 128
        },
        "testCases": {
          "6d5e937f-95e6-4421-86d6-fffa4240a0a7": {
            "id": "6d5e937f-95e6-4421-86d6-fffa4240a0a7",
            "name": "Test1",
            "functionId": "9c1ee3bc-b1e1-4ec7-96d9-17d623ebc333",
            "event": "{\n  \"version\": \"1.0\",\n  \"session\": {\n    \"new\": false,\n    \"sessionId\": \"amzn1.echo-api.session.df4b61da-3966-4204-b88b-94729aad4c4e\",\n    \"application\": {\n      \"applicationId\": \"amzn1.ask.skill.3f85b357-0f14-4442-abd0-b1212d0256d5\"\n    },\n    \"user\": {\n      \"userId\": \"amzn1.ask.account.AFYR2UUR7A2FUUWLKHOZAY3MEJEPWMM5LGZNQJOV7Y4JDWMOM6B344X7AKN7L6ECFVJTMZDUJY73YAS62TBKYVMC65XTPEMNDTVJ5PM3GR2GXGWZBO5WJMM2RVXKVXRDMGHZX5XPQ3KWEXWLITABAN2MXSS2OQHT3T7YC4ZVXT7IA7357UCQWCELBRDSTHSET7GXSUUHMRBP3IA\"\n    }\n  },\n  \"context\": {\n    \"System\": {\n      \"application\": {\n        \"applicationId\": \"amzn1.ask.skill.3f85b357-0f14-4442-abd0-b1212d0256d5\"\n      },\n      \"user\": {\n        \"userId\": \"amzn1.ask.account.AFYR2UUR7A2FUUWLKHOZAY3MEJEPWMM5LGZNQJOV7Y4JDWMOM6B344X7AKN7L6ECFVJTMZDUJY73YAS62TBKYVMC65XTPEMNDTVJ5PM3GR2GXGWZBO5WJMM2RVXKVXRDMGHZX5XPQ3KWEXWLITABAN2MXSS2OQHT3T7YC4ZVXT7IA7357UCQWCELBRDSTHSET7GXSUUHMRBP3IA\"\n      },\n      \"device\": {\n        \"deviceId\": \"amzn1.ask.device.AHS6HUBMC3PCNA5RN2ZJEQNP3QD6SKOFAVAZR4ZIXMLVRYEM3VVJQRJTXJN2K4UO2TJD3T5HUMPMHQILWAJOQ4DLWHMW6QBSXS5LJEFJ6CHG4FCEAIG4CZ5U2UPVQFNB6Y7CWOVAQKOT6ZD2Z2KOJTYCSO4DP7QFLJVVQ4PIRO7HKYXIGY5MG\",\n        \"supportedInterfaces\": {}\n      },\n      \"apiEndpoint\": \"https://api.eu.amazonalexa.com\",\n      \"apiAccessToken\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjEifQ.eyJhdWQiOiJodHRwczovL2FwaS5hbWF6b25hbGV4YS5jb20iLCJpc3MiOiJBbGV4YVNraWxsS2l0Iiwic3ViIjoiYW16bjEuYXNrLnNraWxsLjNmODViMzU3LTBmMTQtNDQ0Mi1hYmQwLWIxMjEyZDAyNTZkNSIsImV4cCI6MTU0Njg3NDQ2NCwiaWF0IjoxNTQ2ODcwODY0LCJuYmYiOjE1NDY4NzA4NjQsInByaXZhdGVDbGFpbXMiOnsiY29uc2VudFRva2VuIjpudWxsLCJkZXZpY2VJZCI6ImFtem4xLmFzay5kZXZpY2UuQUhTNkhVQk1DM1BDTkE1Uk4yWkpFUU5QM1FENlNLT0ZBVkFaUjRaSVhNTFZSWUVNM1ZWSlFSSlRYSk4ySzRVTzJUSkQzVDVIVU1QTUhRSUxXQUpPUTRETFdITVc2UUJTWFM1TEpFRko2Q0hHNEZDRUFJRzRDWjVVMlVQVlFGTkI2WTdDV09WQVFLT1Q2WkQyWjJLT0pUWUNTTzREUDdRRkxKVlZRNFBJUk83SEtZWElHWTVNRyIsInVzZXJJZCI6ImFtem4xLmFzay5hY2NvdW50LkFGWVIyVVVSN0EyRlVVV0xLSE9aQVkzTUVKRVBXTU01TEdaTlFKT1Y3WTRKRFdNT002QjM0NFg3QUtON0w2RUNGVkpUTVpEVUpZNzNZQVM2MlRCS1lWTUM2NVhUUEVNTkRUVko1UE0zR1IyR1hHV1pCTzVXSk1NMlJWWEtWWFJETUdIWlg1WFBRM0tXRVhXTElUQUJBTjJNWFNTMk9RSFQzVDdZQzRaVlhUN0lBNzM1N1VDUVdDRUxCUkRTVEhTRVQ3R1hTVVVITVJCUDNJQSJ9fQ.QqugwdtoNKPkR-h57v5aAhxqG3UxYwgnrG3-DVa9k6LrXA82EhOIgIGBKXtSHJ-3mqFmlBBoUnTfOB3xKQTXaLWFoIW8qOaC46OMDzSxQeo9achlxETALpi7UirG6FeOmfW5MRKCRNEL7YLsFFYuxe6pULJEYdLVd01KqUvJtH6nuzlPiYtkiqTp2XnW6ax_oFgO8yFakMd4M_W8BiUqjkVG5evW4_5VuIpJixa9N-RaAJEGIzRGFR1lBo5Cod6M5ew5Vy8YctzSJ-JDmCDN4v_JF-x909JOt3u_KdmRRrw-AVLoS6s87nrjeRVfzuTstFIHVTIdvj9sQtQ3oOFtag\"\n    },\n    \"Viewport\": {\n      \"experiences\": [\n        {\n          \"arcMinuteWidth\": 246,\n          \"arcMinuteHeight\": 144,\n          \"canRotate\": false,\n          \"canResize\": false\n        }\n      ],\n      \"shape\": \"RECTANGLE\",\n      \"pixelWidth\": 1024,\n      \"pixelHeight\": 600,\n      \"dpi\": 160,\n      \"currentPixelWidth\": 1024,\n      \"currentPixelHeight\": 600,\n      \"touch\": [\n        \"SINGLE\"\n      ]\n    }\n  },\n  \"request\": {\n    \"type\": \"IntentRequest\",\n    \"requestId\": \"amzn1.echo-api.request.12d76dc7-bc28-494b-bbcf-a68a5f722a78\",\n    \"timestamp\": \"2019-01-07T14:21:04Z\",\n    \"locale\": \"en-US\",\n    \"intent\": {\n      \"name\": \"HelloWorldIntent\",\n      \"confirmationStatus\": \"NONE\"\n    }\n  }\n}"
          },
          "5ab36f04-a627-4427-8c78-ccf717524f9a": {
            "id": "5ab36f04-a627-4427-8c78-ccf717524f9a",
            "name": "Alexa_Test",
            "functionId": "9c1ee3bc-b1e1-4ec7-96d9-17d623ebc333",
            "event": "{\n\t\"version\": \"1.0\",\n\t\"session\": {\n\t\t\"new\": false,\n\t\t\"sessionId\": \"amzn1.echo-api.session.57b92460-45f7-4628-a5f8-faf77e9d4848\",\n\t\t\"application\": {\n\t\t\t\"applicationId\": \"amzn1.ask.skill.b4bf71cb-0bfb-4d2f-8974-9d28a59e9e8a\"\n\t\t},\n\t\t\"user\": {\n\t\t\t\"userId\": \"amzn1.ask.account.AGMI4QSTNYCVLXWIRTNEQRCQEGA636XLM4EIWLQGT5JLIG7BMFDA7Y4ORTOULSCJKYJWKK3432O7GBYEGP3DLMUJXEUYYDDOGONQYSAQBNO5VAY5MMFC3HONHFUICLWEBX45N3PB5JGYAHS456F3F5BEUJWY3CQ2HGRFXGA7JKKHMQJQUWK5VBMOFQPA7CXOCEE3FUQ52WBYROA\"\n\t\t}\n\t},\n\t\"context\": {\n\t\t\"System\": {\n\t\t\t\"application\": {\n\t\t\t\t\"applicationId\": \"amzn1.ask.skill.b4bf71cb-0bfb-4d2f-8974-9d28a59e9e8a\"\n\t\t\t},\n\t\t\t\"user\": {\n\t\t\t\t\"userId\": \"amzn1.ask.account.AGMI4QSTNYCVLXWIRTNEQRCQEGA636XLM4EIWLQGT5JLIG7BMFDA7Y4ORTOULSCJKYJWKK3432O7GBYEGP3DLMUJXEUYYDDOGONQYSAQBNO5VAY5MMFC3HONHFUICLWEBX45N3PB5JGYAHS456F3F5BEUJWY3CQ2HGRFXGA7JKKHMQJQUWK5VBMOFQPA7CXOCEE3FUQ52WBYROA\"\n\t\t\t},\n\t\t\t\"device\": {\n\t\t\t\t\"deviceId\": \"amzn1.ask.device.AGRTHCRB42KR4YMB26G74SZ2J5V2XJ3TAHGLLISR2NYEL7FWSOTRAGRGNDY2VVGFQVRDWNADGH3VA76UMKAKMCW4APG22K7VIZCQBRT4VMGC5WJS5OHQMYRRRDQENDHSDGDLMJJJYUZHFOAUEXUVSS4O2667JUVQ5MOJV45JIIWUTCB3WC3XU\",\n\t\t\t\t\"supportedInterfaces\": {}\n\t\t\t},\n\t\t\t\"apiEndpoint\": \"https://api.eu.amazonalexa.com\",\n\t\t\t\"apiAccessToken\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjEifQ.eyJhdWQiOiJodHRwczovL2FwaS5hbWF6b25hbGV4YS5jb20iLCJpc3MiOiJBbGV4YVNraWxsS2l0Iiwic3ViIjoiYW16bjEuYXNrLnNraWxsLmI0YmY3MWNiLTBiZmItNGQyZi04OTc0LTlkMjhhNTllOWU4YSIsImV4cCI6MTU0OTY0NTIzMCwiaWF0IjoxNTQ5NjQ0OTMwLCJuYmYiOjE1NDk2NDQ5MzAsInByaXZhdGVDbGFpbXMiOnsiY29uc2VudFRva2VuIjpudWxsLCJkZXZpY2VJZCI6ImFtem4xLmFzay5kZXZpY2UuQUdSVEhDUkI0MktSNFlNQjI2Rzc0U1oySjVWMlhKM1RBSEdMTElTUjJOWUVMN0ZXU09UUkFHUkdORFkyVlZHRlFWUkRXTkFER0gzVkE3NlVNS0FLTUNXNEFQRzIySzdWSVpDUUJSVDRWTUdDNVdKUzVPSFFNWVJSUkRRRU5ESFNER0RMTUpKSllVWkhGT0FVRVhVVlNTNE8yNjY3SlVWUTVNT0pWNDVKSUlXVVRDQjNXQzNYVSIsInVzZXJJZCI6ImFtem4xLmFzay5hY2NvdW50LkFHTUk0UVNUTllDVkxYV0lSVE5FUVJDUUVHQTYzNlhMTTRFSVdMUUdUNUpMSUc3Qk1GREE3WTRPUlRPVUxTQ0pLWUpXS0szNDMyTzdHQllFR1AzRExNVUpYRVVZWURET0dPTlFZU0FRQk5PNVZBWTVNTUZDM0hPTkhGVUlDTFdFQlg0NU4zUEI1SkdZQUhTNDU2RjNGNUJFVUpXWTNDUTJIR1JGWEdBN0pLS0hNUUpRVVdLNVZCTU9GUVBBN0NYT0NFRTNGVVE1MldCWVJPQSJ9fQ.H8W-TXIBx6ZNjqDzu2681Wz2q4uyVue5HNma2nFquC5ncjoNs8acvWUqw5Od29ScNv3wL3r-64zpzjbddj1UHmkN7labAhjPuX9-Sc1lwH88moi9D2Gw3g2JatZEG7_uSfbVSgyCPJXhTmw4yD4ZJ53R8nod_I6OBYsFejRglJ2Nep3u3rfe_Oh7S76xjKuqCVB2YY4BC4gqYuVz1PqlaNGvvTFRiuSWeQagsNtf6dXBvr5FcXNmvnVCeU4WnwlB3V_9LuVD2ISk4DmZJdBxF1owb-pyDa83mrbNNfEgpIg6gx3NwdE0LQ8c_x-iJVmtLuzEqrygSQRvuLc70kpX0Q\"\n\t\t},\n\t\t\"Viewport\": {\n\t\t\t\"experiences\": [\n\t\t\t\t{\n\t\t\t\t\t\"arcMinuteWidth\": 246,\n\t\t\t\t\t\"arcMinuteHeight\": 144,\n\t\t\t\t\t\"canRotate\": false,\n\t\t\t\t\t\"canResize\": false\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"shape\": \"RECTANGLE\",\n\t\t\t\"pixelWidth\": 1024,\n\t\t\t\"pixelHeight\": 600,\n\t\t\t\"dpi\": 160,\n\t\t\t\"currentPixelWidth\": 1024,\n\t\t\t\"currentPixelHeight\": 600,\n\t\t\t\"touch\": [\n\t\t\t\t\"SINGLE\"\n\t\t\t]\n\t\t}\n\t},\n\t\"request\": {\n\t\t\"type\": \"SessionEndedRequest\",\n\t\t\"requestId\": \"amzn1.echo-api.request.aaebea08-7690-4093-a2d6-189472e77ebf\",\n\t\t\"timestamp\": \"2019-02-08T16:55:30Z\",\n\t\t\"locale\": \"it-IT\",\n\t\t\"reason\": \"ERROR\",\n\t\t\"error\": {\n\t\t\t\"type\": \"INVALID_RESPONSE\",\n\t\t\t\"message\": \"An exception occurred while dispatching the request to the skill.\"\n\t\t}\n\t}\n}"
          }
        }
      }
    },
    "deletedFiles": [],
    "rootNode": "fa54cc39-b36b-4a0e-a7ed-6dc250ddf816",
    "openFiles": [
      "9c1ee3bc-b1e1-4ec7-96d9-17d623ebc333"
    ],
    "currentFileId": "9c1ee3bc-b1e1-4ec7-96d9-17d623ebc333",
    "resources": {},
    "envVariables": [
      {
        "lambdaId": "all",
        "varKey": "SIGMA_AWS_ACC_ID",
        "varValue": null,
        "shouldPersist": false,
        "displayOnly": false,
        "editable": false
      }
    ],
    "packageJSON": {
      "dependencies": {
        "aws-sdk": {
          "name": "aws-sdk",
          "version": "2.398.0"
        }
      }
    },
    "lambdaId": "9c1ee3bc-b1e1-4ec7-96d9-17d623ebc333"
  },
  "PROJECT_META": {
    "projectName": "Alexa_AWS_SDK_Test",
    "projectDescription": "",
    "projectVersion": "1.0.0",
    "projectRegion": "eu-west-1",
    "platform": "AWS",
    "platformRegions": {},
    "lastSave": 1550767462058
  },
  "VCS_STATE": {
    "provider": "GitHub",
    "repo": {
      "name": "Alexa_AWS_SDK_Test",
      "url": "https://github.com/stefanomoccia/Alexa_AWS_SDK_Test"
    }
  }
}